makeCachematrix <- function(x = matrix()){
        s <- NULL
        set <- function(y){
                x <<- y
                s <<- NULL
                }
        get <- function() x
        setsolve <- function(solve) s <<- solve
        getsolve <- function() s
        list(set=set, get=get, setsolve=setsolve, getsolve=getsolve)
}
cachesolve <- function(x, ...){
        s <- x$getsolve()
        if(!is.null(s)){
                message("getting cached data")
                return(s)
        }
        data <-  x$get()
        s <- solve(data, ...)
        x$setsolve(s)
        s
}
source("ProgrammingAssignment2.R")


mat <- makeCachematrix(matrix(c(1,0,5,2,1,6,3,5,0), nrow=3))



source("ProgrammingAssignment2.R")
mat <- makeCachematrix(matrix(c(1,0,5,2,1,6,3,5,0), nrow=3))
cachesolve(mat)
     [,1] [,2] [,3]
[1,]   -6  3.6  1.4
[2,]    5 -3.0 -1.0
[3,]   -1  0.8  0.2

y <- matrix(c(1,0,5,2,1,6,3,5,0), nrow=3)                ## The original matrix
z <- matrix(c(-6,5,-1,3.6,-3,0.8,1.4,-1,0.2), nrow=3)    ## The inverse of the original matrix given by cachesolve()
> y %*% z                                                ## Matrix multiplication of the original matrix and the matrix
                                                         ## given by cachesolve() yields an identity matrix,
                                                         ##  which means y and z are inverse matrices 
     [,1]         [,2] [,3]
[1,]    1 4.440892e-16    0
[2,]    0 1.000000e+00    0
[3,]    0 0.000000e+00    1

source("ProgrammingAssignment2.R")
mat <- makeCachematrix(matrix(c(6,0,5,2), nrow=2))
cachesolve(mat)
          [,1]       [,2]
[1,] 0.1666667 -0.4166667
[2,] 0.0000000  0.5000000
